plugins {
    id "com.peterabeles.nativehelper" version "1.0.0"
}

apply plugin: 'java-library'

import com.peterabeles.NativeHelper

java {
    withJavadocJar()
    withSourcesJar()
    toolchain { languageVersion = JavaLanguageVersion.of(11) }
}

repositories {
    mavenCentral()
    mavenLocal()

    maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
}

test {
    useJUnitPlatform()
    reports.html.enabled = false
    // Make the error logging verbose to make debugging on CI easier
    testLogging.showStandardStreams = true
    testLogging.showCauses true
    testLogging.showExceptions true
    testLogging.showStackTraces true
}

javadoc {
    configure(options) {
        links = ['http://docs.oracle.com/javase/8/docs/api/']
        failOnError = false
        enabled = !project.version.contains("SNAPSHOT") // disable to stop it from spamming stdout
    }

    // https://github.com/gradle/gradle/issues/11182 Error introduced in JDK 11
    if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
        options.addStringOption("-release", "8")
    }

    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

dependencies {
    ['core','swing'].each { String a->
        compile('org.boofcv:boofcv-'+a+':0.36')
    }

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_version")
}

tasks.withType(Test) {
    systemProperty "java.library.path", file("../build/jni")
}

// Get the location of the native code
if( project.hasProperty("native_build_location")) {
    ext.build_location = project.property("native_build_location")
} else {
    ext.build_location = "../build_release"
}
if( !file("$ext.build_location").exists() ) {
    throw new GradleException("Native build directory $ext.build_location does not exist!")
}

// Determine the native platform it's running on
ext.platform = NativeHelper.getPlatformName()

println "  Classifier name: $project.ext.platform"
println "  Native location: $project.ext.build_location"

task nativeJar(type: Jar) {
    classifier "$project.ext.platform"
    from files("$project.ext.build_location/libwebcam-jni/","$project.ext.build_location/libwebcam/")
    include 'libwebcamjni.*'
    include 'libwebcam.*'
}
